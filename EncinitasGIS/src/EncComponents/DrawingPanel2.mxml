<?xml version="1.0" encoding="utf-8"?>
<EncComponents:SuperPanel xmlns:fx="http://ns.adobe.com/mxml/2009" 
						  xmlns:s="library://ns.adobe.com/flex/spark" 
						  xmlns:mx="library://ns.adobe.com/flex/mx" 
						  xmlns:EncComponents="EncComponents.*"
						  xmlns:esri="http://www.esri.com/2008/ags"
						  layout="absolute" width="400" height="300"
						  minWidth="200" minHeight="100"
						  horizontalAlign="center"
						  verticalAlign="middle"
						  moveEffect="Move"
						  creationComplete="init()"
						  close="superpanel1_closeHandler(event)" 
						  >


	
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.Map;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.Units;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.events.GeometryServiceEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.symbols.SimpleMarkerSymbol;
			import com.esri.ags.symbols.Symbol;
			import com.esri.ags.symbols.TextSymbol;
			import com.esri.ags.tasks.GeometryService;
			import com.esri.ags.tasks.supportClasses.AreasAndLengthsParameters;
			import com.esri.ags.tasks.supportClasses.LengthsParameters;
			import com.esri.ags.tools.DrawTool;
			
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.formatters.NumberBaseRoundType;
			
			// constants
			private const ICON_URL:String = "assets/images/";
			private const TEXT_MODE:String = "text";
			
			//labels
			private var areaLabel:String;
			[Bindable]
			private var areaUnitsLabel:String;
			[Bindable]
			private var circleLabel:String;
			[Bindable]
			private var ellipseLabel:String;
			[Bindable]
			private var clearLabel:String;
			[Bindable]
			private var colorLabel:String;
			[Bindable]
			private var distanceUnitsLabel:String;
			private var drawLabel:String;
			[Bindable]
			private var drawtextLabel:String;
			[Bindable]
			private var deactivateLabel:String;
			[Bindable]
			private var freehandlineLabel:String;
			[Bindable]
			private var freehandpolygonLabel:String;
			private var lengthLabel:String;
			[Bindable]
			private var lineLabel:String;
			private var measurementsLabel:String;
			private var perimeterLabel:String;
			[Bindable]
			private var pointLabel:String;
			[Bindable]
			private var polygonLabel:String;
			[Bindable]
			private var rectangleLabel:String;
			[Bindable]
			private var showmeasurementsLabel:String;
			[Bindable]
			private var sizeLabel:String;
			[Bindable]
			private var textLabel:String;
			
			[Bindable]
			private var configArea:Array;
			[Bindable]
			private var configDistance:Array;
			
			[Bindable]
			private var _configXML:XML;
			
			private var drawMode:String;
			private var drawSymbol:Symbol;
			private var graphicsLayer:GraphicsLayer;
			private var measurePt:MapPoint;
			private var spatialref:Number = 2230 //102003;
			
/* 			[Bindable]
			private var _map:Map;
			
			public function get targetMap():Map
			{
				return _map
			}
			
			public function set targetMap(value:Map):void
			{
				_map = value
			} */
			
			public function set Cinfig(value:XML):void {
				_configXML = value;
			}
			
			private function init():void
			{
				graphicsLayer = new GraphicsLayer();
				graphicsLayer.name = "Draw Features";
				map.addLayer(graphicsLayer);
				
				//labels
				drawLabel = "Draw";
				measurementsLabel = "Measurements";
				pointLabel =  "Draw Point";
				lineLabel =  "Draw Line";
				freehandlineLabel =  "Draw Freehand Line";
				rectangleLabel =  "Draw Rectangle";
				circleLabel = "Draw Circle";
				ellipseLabel =  "Draw Ellipse";
				polygonLabel =  "Draw Polygon";
				freehandpolygonLabel =  "Draw Freehand Polygon";
				drawtextLabel =  "Add Text";
				deactivateLabel =  "Deactivate drawtool";
				clearLabel = "Clear drawing";
				textLabel = "Text:";
				colorLabel =  "Color:";
				sizeLabel = "Size:";
				showmeasurementsLabel = "Show Measurements:";
				distanceUnitsLabel = "Distance Units:";
				areaUnitsLabel = "Area Units:";
				areaLabel = "Area:";
				perimeterLabel = "Perimeter:";
				lengthLabel = "Length:";
				
				
				geometryService.url = _configXML.geometryservice;
				var distanceList:XMLList = _configXML..distanceunit;
				
				var areaList:XMLList = _configXML..areaunit;
				var i:Number;
				configDistance = new Array()
				for (i = 0; i < distanceList.length(); i++)
				{
					var dLabel:String = distanceList[i];
					var dAbbr:String = distanceList[i].@abbr;
					var dConversion:Number = Number(distanceList[i].@conversion);
					var dUnit:Object =
						{
							label: dLabel,
							abbr: dAbbr,
							conversion: dConversion
						}
					configDistance.push(dUnit);
				}
				cboDistance.dataProvider = configDistance;
				configArea = [];
				for (i = 0; i < areaList.length(); i++)
				{
					var aLabel:String = areaList[i];
					var aAbbr:String = areaList[i].@abbr;
					var aConversion:Number = Number(areaList[i].@conversion);
					var aUnit:Object =
						{
							label: aLabel,
							abbr: aAbbr,
							conversion: aConversion
						}
					configArea.push(aUnit);
				}
				cboArea.dataProvider = configArea;
				
				//wTemplate.addTitlebarButton(ICON_URL + "i_draw.png", drawLabel, showStateDraw);
				//wTemplate.addTitlebarButton(ICON_URL + "i_measure.png", measurementsLabel, showStateMeasurements);
			}
			
			private function activateDrawTool(value:String, mode:String):void
			{
				myDrawTool.activate(value);
				drawMode = mode;
				var status:String;
				switch (value)
				{
					case DrawTool.MAPPOINT:
					{
						var textSymbol:TextSymbol = new TextSymbol(txtLabel.text);
						var txtFormat:TextFormat = new TextFormat("Arial", numGraphic.value, cpGraphic.selectedColor);
						textSymbol.textFormat = txtFormat;
						
						status = (mode == TEXT_MODE) ? drawtextLabel : pointLabel;
						drawSymbol = (mode == TEXT_MODE) ?
							textSymbol :
							new SimpleMarkerSymbol(SimpleMarkerSymbol.STYLE_CIRCLE, numGraphic.value, cpGraphic.selectedColor, 1, 0, 0, 0, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpGraphic.selectedColor, 1, 1));
						break;
					}
					case DrawTool.POLYLINE:
					{
						status = lineLabel;
						drawSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpGraphic.selectedColor, 1, numGraphic.value);
						break;
					}
					case DrawTool.FREEHAND_POLYLINE:
					{
						status = freehandlineLabel;
						drawSymbol = new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpGraphic.selectedColor, 1, numGraphic.value);
						break;
					}
					case DrawTool.EXTENT:
					{
						status = rectangleLabel;
						drawSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, cpGraphic.selectedColor, 0.5, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpGraphic.selectedColor, 1, 1));
						break;
					}
					case DrawTool.CIRCLE:
					{
						status = circleLabel;
						drawSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, cpGraphic.selectedColor, 0.5, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpGraphic.selectedColor, 1, 1));
						break;
					}
					case DrawTool.ELLIPSE:
					{
						status = ellipseLabel;
						drawSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, cpGraphic.selectedColor, 0.5, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpGraphic.selectedColor, 1, 1));
						break;
					}
					case DrawTool.POLYGON:
					{
						status = polygonLabel;
						drawSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, cpGraphic.selectedColor, 0.5, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpGraphic.selectedColor, 1, 1));
						break;
					}
					case DrawTool.FREEHAND_POLYGON:
					{
						status = freehandpolygonLabel;
						drawSymbol = new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID, cpGraphic.selectedColor, 0.5, new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID, cpGraphic.selectedColor, 1, 1));
						break;
					}
				}
				//setMapAction(value, status, drawSymbol, drawEnd);
				
			}
			
			private function onFault(info:Object, token:Object = null):void
			{
				Alert.show(info.toString());
			}
			
			private function drawEnd(event:DrawEvent):void
			{
				// deactivate the draw tool
				event.target.deactivate();
				var outSR:SpatialReference = new SpatialReference(spatialref);

				var geom:Geometry = event.graphic.geometry;
				var gra:Graphic = new Graphic(geom);
				gra.symbol = drawSymbol;
				switch (geom.type)
				{
					case Geometry.MAPPOINT:
					{
						if (chkMeasurements.selected)
						{
							geometryService.project([ geom ], outSR);
							measurePt = geom as MapPoint;
							//addDrawLabel(numFormatter.format(measurePt.x) + ", " + numFormatter.format(measurePt.y));
						}
						break;
					}
					case Geometry.POLYLINE:
					{
						if (chkMeasurements.selected)
						{
							geometryService.project([ geom ], outSR);
							var polyline:Polyline = geom as Polyline;
							measurePt = polyline.extent.center;
						}
						break;
					}
					case Geometry.POLYGON:
					{
						if (chkMeasurements.selected)
						{
							geometryService.project([ geom ], outSR);
							var polygon:Polygon = geom as Polygon;
							measurePt = polygon.extent.center;
						}
						break;
					}
					case Geometry.EXTENT:
					{
						if (chkMeasurements.selected)
						{
							geometryService.project([ geom ], outSR);
							var extent:Extent = geom as Extent;
							measurePt = extent.center;
						}
						break;
					}
				}
				graphicsLayer.add(gra);
			}
			
			private function projectCompleteHandler(event:GeometryServiceEvent):void
			{
				var geom:Geometry = (event.result as Array)[0];
				var lengthsParameters:LengthsParameters = new LengthsParameters();
				var areasAndLengthsParameters:AreasAndLengthsParameters = new AreasAndLengthsParameters();
				switch (geom.type)
				{
					case Geometry.MAPPOINT:
					{
						var measurePt:MapPoint = MapPoint(geom);
						var numFormatterCoord:NumberFormatter = new NumberFormatter;
						numFormatterCoord.precision = 2;
						numFormatterCoord.useThousandsSeparator=false;
						numFormatterCoord.rounding = NumberBaseRoundType.NEAREST;
						addDrawLabel(numFormatterCoord.format(measurePt.x) + ", " + numFormatterCoord.format(measurePt.y));
						break;
					}
					case Geometry.POLYLINE:
					{
						var pLine:Polyline = Polyline(geom);
						lengthsParameters.geodesic = true;
						lengthsParameters.polylines = [ pLine ];
						lengthsParameters.lengthUnit = GeometryService.UNIT_FOOT;
						geometryService.lengths(lengthsParameters);
						break;
					}
					case Geometry.POLYGON:
					{
						var pGon:Polygon = Polygon(geom);
						areasAndLengthsParameters.polygons = [ pGon ];
						areasAndLengthsParameters.areaUnit = GeometryService.UNIT_SQUARE_FEET;
						geometryService.areasAndLengths(areasAndLengthsParameters);
						break;
					}
					case Geometry.EXTENT:
					{
						var extent:Extent = Extent(geom);
						
						// convert it to a polygon for measurment
						const arrPoints:Array = [
							new MapPoint(extent.xmin, extent.ymin),
							new MapPoint(extent.xmin, extent.ymax),
							new MapPoint(extent.xmax, extent.ymax),
							new MapPoint(extent.xmax, extent.ymin),
							new MapPoint(extent.xmin, extent.ymin)
						];
						
						var polygon:Polygon = new Polygon();
						polygon.addRing(arrPoints);
						polygon.spatialReference = extent.spatialReference;
						
						areasAndLengthsParameters.polygons = [ polygon ];
						areasAndLengthsParameters.areaUnit = GeometryService.UNIT_SQUARE_FEET;
						geometryService.areasAndLengths(areasAndLengthsParameters);
						break;
					}
				}
			}
			
			private function arealengthsCompleteHandler(event:GeometryServiceEvent):void
			{
				var area:Number = event.result.areas[0]; //event.arealengths.areas[0];
				var length:Number = event.result.lengths[0]; // or (event.result as Array)[0]; //event.arealengths.lengths[0];
				var abbrArea:String = cboArea.selectedItem.abbr;
				var convArea:Number = cboArea.selectedItem.conversion;
				var abbrDist:String = cboDistance.selectedItem.abbr;
				var convDist:Number = cboDistance.selectedItem.conversion;
				var label:String = areaLabel + " " + numFormatter.format(area * convArea) + " " + abbrArea;
				label += "\n" + perimeterLabel + " " + numFormatter.format(length * convDist) + " " + abbrDist;
				addDrawLabel(label);
			}
			
			private function lengthsCompleteHandler(event:GeometryServiceEvent):void
			{
				var length:Number = (event.result as Array)[0];
				var abbrDist:String = cboDistance.selectedItem.abbr;
				var convDist:Number = cboDistance.selectedItem.conversion;
				var label:String = lengthLabel + " " + numFormatter.format(length * convDist) + " " + abbrDist;
				addDrawLabel(label);
			}
			
			private function addDrawLabel(label:String):void
			{
				var txtSym:TextSymbol = new TextSymbol(label);
				txtSym.yoffset = 8;
				var txtFormat:TextFormat = new TextFormat("Arial", 12, 0x000000, true); // black label
				txtSym.textFormat = txtFormat;
				var gra:Graphic = new Graphic(measurePt);
				gra.symbol = txtSym;
				graphicsLayer.add(gra);
			}
			
			private function clear():void
			{
				graphicsLayer.clear();
			}
			
			private function widgetClosedHandler(event:Event):void
			{
				graphicsLayer.visible = false;
				//setMapNavigation(null, null);
			}
			
			private function widgetOpenedHandler(event:Event):void
			{
				if (graphicsLayer)
				{
					graphicsLayer.visible = true;
				}
			}
			
			private function showStateDraw():void
			{
				this.currentState = "draw";
			}
			
			private function showStateMeasurements():void
			{
				this.currentState = "measurements";
			}

			protected function linkbutton1_clickHandler(event:MouseEvent):void
			{
				if (currentState == "draw")
				{
					currentState = "measurments";
				}
				else
				{
					currentState = "draw"
				}
			}


			protected function superpanel1_closeHandler(event:CloseEvent):void
			{
				map.removeLayer(graphicsLayer);
				if ( parent is Canvas)
				{
					parent.removeChild(this);
				}
				else if ( parent is Group)
				{
					var parentGroup:Group = (this.parent as Group);
					parentGroup.removeElement(this);
				}
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<esri:GeometryService id="geometryService"
							  areasAndLengthsComplete="arealengthsCompleteHandler(event)"
							  fault="onFault(event)"
							  lengthsComplete="lengthsCompleteHandler(event)"
							  projectComplete="projectCompleteHandler(event)"
							  url="http://encmapservices.cityofencinitas.org/ArcGIS/rest/services/Geometry/GeometryServer"/>
		
		<mx:NumberFormatter id="numFormatter"
							precision="2"
							useThousandsSeparator="true"/>
		<esri:DrawTool id="myDrawTool" drawEnd="drawEnd(event)" map="{this.map}"  />
			

	</fx:Declarations>
	

	<EncComponents:states>
		<s:State name="draw"/>
		<s:State name="measurements"/>
	</EncComponents:states>
	<!--	<viewer:WidgetTemplate id="wTemplate"
	width="420" height="300"
	closed="widgetClosedHandler(event)"
	open="widgetOpenedHandler(event)">-->
<s:Group>

	<s:VGroup id="draw"
			  width="100%" height="100%"
			  gap="2"
			  visible="false"
			  visible.draw="true">
		<s:HGroup width="100%"
				  gap="2"
				  horizontalAlign="center">
			<mx:Image width="40" height="40"
					  buttonMode="true"
					  click="{activateDrawTool(DrawTool.MAPPOINT, null)}"
					  source="@Embed(source='assets/icons/i_draw_point.png')"
					  toolTip="{pointLabel}"
					  useHandCursor="true"/> 
			<mx:Image width="40" height="40"
					  buttonMode="true"
					  click="{activateDrawTool(DrawTool.POLYLINE, null)}"
					  source="@Embed(source='assets/icons/i_draw_line.png')"
					  toolTip="{lineLabel}"
					  useHandCursor="true"/>
			<mx:Image width="40" height="40"
					  buttonMode="true"
					  click="{activateDrawTool(DrawTool.FREEHAND_POLYLINE, null)}"
					  source="@Embed(source='assets/icons/i_draw_freeline.png')"
					  toolTip="{freehandlineLabel}"
					  useHandCursor="true"/>
			<mx:Image width="40" height="40"
					  buttonMode="true"
					  click="{activateDrawTool(DrawTool.EXTENT, null)}"
					  source="@Embed(source='assets/icons/i_draw_rect.png')"
					  toolTip="{rectangleLabel}"
					  useHandCursor="true"/>
			<mx:Image width="40" height="40"
					  buttonMode="true"
					  click="{activateDrawTool(DrawTool.CIRCLE, null)}"
					  source="@Embed(source='assets/icons/i_draw_circle.png')"
					  toolTip="{circleLabel}"
					  useHandCursor="true"/>
			<mx:Image width="40" height="40"
					  buttonMode="true"
					  click="{activateDrawTool(DrawTool.ELLIPSE, null)}"
					  source="@Embed(source='assets/icons/i_draw_ellipse.png')"
					  toolTip="{ellipseLabel}"
					  useHandCursor="true"/>
			<mx:Image width="40" height="40"
					  buttonMode="true"
					  click="{activateDrawTool(DrawTool.POLYGON, null)}"
					  source="@Embed(source='assets/icons/i_draw_poly.png')"
					  toolTip="{polygonLabel}"
					  useHandCursor="true"/>
			<mx:Image width="40" height="40"
					  buttonMode="true"
					  click="{activateDrawTool(DrawTool.FREEHAND_POLYGON, null)}"
					  source="@Embed(source='assets/icons/i_draw_freepoly.png')"
					  toolTip="{freehandpolygonLabel}"
					  useHandCursor="true"/>
			<mx:Image width="40" height="40"
					  buttonMode="true"
					  click="{activateDrawTool(DrawTool.MAPPOINT, TEXT_MODE)}"
					  source="@Embed(source='assets/icons/i_draw_text.png')"
					  toolTip="{drawtextLabel}"
					  useHandCursor="true"/>
		</s:HGroup>
		<s:HGroup width="100%"
				  horizontalAlign="right"
				  paddingRight="5"
				  paddingTop="2">
			<s:Label buttonMode="true"
					 click="clear()"
					 fontWeight="bold"
					 text="{clearLabel}"
					 textDecoration="underline"/>
		</s:HGroup>
		<mx:Form id="frmDraw"
				 width="100%" height="100%"
				 paddingBottom="0"
				 verticalScrollPolicy="off">
			<mx:FormItem width="100%" label="{textLabel}">
				<mx:TextInput id="txtLabel"
							  width="60%"
							  text=""/>
			</mx:FormItem>
			<mx:FormItem width="100%" label="{colorLabel}">
				<mx:ColorPicker id="cpGraphic" selectedColor="0x3FAFDC"/>
			</mx:FormItem>
			<mx:FormItem width="100%" label="{sizeLabel}">
				<mx:NumericStepper id="numGraphic"
								   maximum="50"
								   minimum="0"
								   value="10"/>
			</mx:FormItem>
		</mx:Form>
		<s:VGroup id="measurements"
				  width="100%" height="100%"
				  gap="1">
			<mx:Form id="frmMeasurements"
					 width="100%" height="100%"
					 paddingBottom="0"
					 verticalScrollPolicy="off">
				<mx:FormItem width="100%" label="{showmeasurementsLabel}">
					<mx:CheckBox id="chkMeasurements"/>
				</mx:FormItem>
				<mx:FormItem width="100%" label="{distanceUnitsLabel}">
					<mx:ComboBox id="cboDistance"/>
				</mx:FormItem>
				<mx:FormItem width="100%" label="{areaUnitsLabel}">
					<mx:ComboBox id="cboArea"/>
				</mx:FormItem>
			</mx:Form>
		</s:VGroup>
	</s:VGroup>
</s:Group>
</EncComponents:SuperPanel>
